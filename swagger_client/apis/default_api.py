# coding: utf-8

"""
    RepositPower External

    Unofficial RepositPower External API  This API is built by hand from the description at https://api.repositpower.com/docs/  It should not be mistaken for official in any way shape or form, it's simply my attempt to document the API and build some client libraries from that.  This API is demonstrably wrong around authentication - please read the official docco at the link above for accurate details. It will login, but all the login options are not captured - I wasn't clear how to write up both basic and token login being available on all URLs (ie. how to make auth an either/or rather than a both).  This API is also not completed yet. I've note tested a bunch of 200 responses, and some that I have don't have accurate enums in them because I don't know all the possible values.  Also, I haven't quite figured out how to wrap the whole thing in unit tests.  This version (1.0.0) matches version 11/03/2016 of the official docs (as at 30/5/2017)

    OpenAPI spec version: 1.0.0
    Contact: kevin@littlejohn.id.au
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def auth_login_get(self, **kwargs):
        """
        return access token upon successful basic auth
        Send username and password as basic auth and you will get back an access_token value. Add that value to the Headers of all subsequent calls (see api_key security definition above) as your authenticated token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_login_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_login_get_with_http_info(**kwargs)
        else:
            (data) = self.auth_login_get_with_http_info(**kwargs)
            return data

    def auth_login_get_with_http_info(self, **kwargs):
        """
        return access token upon successful basic auth
        Send username and password as basic auth and you will get back an access_token value. Add that value to the Headers of all subsequent calls (see api_key security definition above) as your authenticated token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_login_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_login_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/auth/login'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['basic']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def auth_login_post(self, **kwargs):
        """
        return access token (session id) upon successful basic or html auth (use username/password, or use basic auth)
        Post username and password and you will get back an access_token value. Add that value to the Headers of all subsequent calls (see api_key security definition above) as your authenticated token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_login_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthParams body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_login_post_with_http_info(**kwargs)
        else:
            (data) = self.auth_login_post_with_http_info(**kwargs)
            return data

    def auth_login_post_with_http_info(self, **kwargs):
        """
        return access token (session id) upon successful basic or html auth (use username/password, or use basic auth)
        Post username and password and you will get back an access_token value. Add that value to the Headers of all subsequent calls (see api_key security definition above) as your authenticated token.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_login_post_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AuthParams body:
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_login_post" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/auth/login'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def auth_logout_get(self, **kwargs):
        """
        de-authenticate the token (always returns success)


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_logout_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.auth_logout_get_with_http_info(**kwargs)
        else:
            (data) = self.auth_logout_get_with_http_info(**kwargs)
            return data

    def auth_logout_get_with_http_info(self, **kwargs):
        """
        de-authenticate the token (always returns success)


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.auth_logout_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method auth_logout_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/auth/logout'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2001',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_battery_capacity_get(self, userkey, **kwargs):
        """
        battery capacity in kWh


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_battery_capacity_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_battery_capacity_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_battery_capacity_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_battery_capacity_get_with_http_info(self, userkey, **kwargs):
        """
        battery capacity in kWh


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_battery_capacity_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_battery_capacity_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_battery_capacity_get`")


        collection_formats = {}

        resource_path = '/deployments/{userkey}/battery/capacity'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2004',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_battery_historical_soc_get(self, userkey, **kwargs):
        """
        state of charge of a battery in kWh


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_battery_historical_soc_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_battery_historical_soc_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_battery_historical_soc_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_battery_historical_soc_get_with_http_info(self, userkey, **kwargs):
        """
        state of charge of a battery in kWh


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_battery_historical_soc_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_battery_historical_soc_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_battery_historical_soc_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_battery_historical_soc_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/battery/historical/soc'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2008',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_components_get(self, userkey, **kwargs):
        """
        installed components and their overall status


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_components_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_components_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_components_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_components_get_with_http_info(self, userkey, **kwargs):
        """
        installed components and their overall status


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_components_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_components_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_components_get`")


        collection_formats = {}

        resource_path = '/deployments/{userkey}/components'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2003',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_cost_historical_get(self, userkey, **kwargs):
        """
        energy cost in $


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_cost_historical_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_cost_historical_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_cost_historical_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_cost_historical_get_with_http_info(self, userkey, **kwargs):
        """
        energy cost in $


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_cost_historical_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_cost_historical_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_cost_historical_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_cost_historical_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/cost/historical'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20010',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_generation_historical_p_get(self, userkey, **kwargs):
        """
        solar generation data as negative real_power in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_generation_historical_p_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_generation_historical_p_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_generation_historical_p_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_generation_historical_p_get_with_http_info(self, userkey, **kwargs):
        """
        solar generation data as negative real_power in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_generation_historical_p_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_generation_historical_p_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_generation_historical_p_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_generation_historical_p_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/generation/historical/p'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2005',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_gridcredits_historical_get(self, userkey, **kwargs):
        """
        earned gridcredits


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_gridcredits_historical_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_gridcredits_historical_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_gridcredits_historical_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_gridcredits_historical_get_with_http_info(self, userkey, **kwargs):
        """
        earned gridcredits


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_gridcredits_historical_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_gridcredits_historical_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_gridcredits_historical_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_gridcredits_historical_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/gridcredits/historical'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse20011',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_house_historical_get(self, userkey, **kwargs):
        """
        house consumption in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_house_historical_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_house_historical_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_house_historical_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_house_historical_get_with_http_info(self, userkey, **kwargs):
        """
        house consumption in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_house_historical_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_house_historical_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_house_historical_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_house_historical_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/house/historical'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2007',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_inverter_historical_p_get(self, userkey, **kwargs):
        """
        the battery inverter data as real_power in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_inverter_historical_p_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_inverter_historical_p_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_inverter_historical_p_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_inverter_historical_p_get_with_http_info(self, userkey, **kwargs):
        """
        the battery inverter data as real_power in kW


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_inverter_historical_p_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_inverter_historical_p_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_inverter_historical_p_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_inverter_historical_p_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/inverter/historical/p'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2006',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def deployments_userkey_meter_historical_p_get(self, userkey, **kwargs):
        """
        real power measurements in kW at the grid connection


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_meter_historical_p_get(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deployments_userkey_meter_historical_p_get_with_http_info(userkey, **kwargs)
        else:
            (data) = self.deployments_userkey_meter_historical_p_get_with_http_info(userkey, **kwargs)
            return data

    def deployments_userkey_meter_historical_p_get_with_http_info(self, userkey, **kwargs):
        """
        real power measurements in kW at the grid connection


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deployments_userkey_meter_historical_p_get_with_http_info(userkey, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str userkey: User Key from /userkeys (required)
        :param int delta_t: downsample interval
        :param int start: Start time
        :param int end: End time
        :param str format:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userkey', 'delta_t', 'start', 'end', 'format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deployments_userkey_meter_historical_p_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userkey' is set
        if ('userkey' not in params) or (params['userkey'] is None):
            raise ValueError("Missing the required parameter `userkey` when calling `deployments_userkey_meter_historical_p_get`")

        if 'delta_t' in params and params['delta_t'] < 150:
            raise ValueError("Invalid value for parameter `delta_t` when calling `deployments_userkey_meter_historical_p_get`, must be a value greater than or equal to `150`")

        collection_formats = {}

        resource_path = '/deployments/{userkey}/meter/historical/p'.replace('{format}', 'json')
        path_params = {}
        if 'userkey' in params:
            path_params['userkey'] = params['userkey']

        query_params = {}
        if 'delta_t' in params:
            query_params['delta_t'] = params['delta_t']
        if 'start' in params:
            query_params['start'] = params['start']
        if 'end' in params:
            query_params['end'] = params['end']
        if 'format' in params:
            query_params['format'] = params['format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2009',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)

    def userkeys_get(self, **kwargs):
        """
        all userkeys/battery system identifiers for the current user


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.userkeys_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.userkeys_get_with_http_info(**kwargs)
        else:
            (data) = self.userkeys_get_with_http_info(**kwargs)
            return data

    def userkeys_get_with_http_info(self, **kwargs):
        """
        all userkeys/battery system identifiers for the current user


        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.userkeys_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method userkeys_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/userkeys/'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse2002',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            _preload_content=params.get('_preload_content', True),
                                            _request_timeout=params.get('_request_timeout'),
                                            collection_formats=collection_formats)
